package builder.visframe.context.scheme.applier.reproduceandinserter.operation;

import java.io.IOException;
import java.sql.SQLException;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Parent;
import javafx.scene.control.Button;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import utils.AlertUtils;

public class OperationReproducingAndInsertionController {
	public static final String FXML_FILE_DIR_STRING = "/builder/visframe/context/scheme/applier/reproduceandinserter/operation/OperationReproducingAndInsertion.fxml";
	
	///////////////////////////////////
	private OperationReproducingAndInsertionManager manager;
	
	void setManager(OperationReproducingAndInsertionManager manager) {
		this.manager = manager;
	}
	
	/**
	 * @return the manager
	 */
	public OperationReproducingAndInsertionManager getManager() {
		return manager;
	}
	
	
	public Parent getRootNodeContainer() {
		return this.rootContainerHBox;
	}
	
	/**
	 * return the AnchorPane on which the graph is laid out
	 * @return
	 */
	AnchorPane getGraphLayoutAnchorPane() {
		return this.trimmedIntegratedDOSGraphAnchorPane;
	}
	
	VBox getCurrentReproducedOperationContainerVBox() {
		return this.currentReproducedOperationContainerVBox;
	}
	
	VBox getReproducedAndInsertedOperationContainerVBox() {
		return this.reproducedAndInsertedOperationContainerVBox;
	}
	/**
	 * whether or not the greedy run mode is selected;
	 * if not, use the one-by-one mode;
	 * @return
	 */
	boolean isGreedyRunSelected() {
		return this.greedyRunModeRadioButton.isSelected();
	}
	
	
	/////////////////////////////////////
	private ToggleGroup modeCheckBoxToggleGroup;
	@FXML
	public void initialize() {
		modeCheckBoxToggleGroup = new ToggleGroup();
		modeCheckBoxToggleGroup.getToggles().add(this.greedyRunModeRadioButton);
		modeCheckBoxToggleGroup.getToggles().add(this.oneByOneRunModeRadioButton);
		this.greedyRunModeRadioButton.setSelected(false); //initial mode is one-by-one
		this.oneByOneRunModeRadioButton.setSelected(true);
	}
	
	
	@FXML
	private HBox rootContainerHBox;
	@FXML
	HBox controlHBox;
	@FXML
	private RadioButton greedyRunModeRadioButton;
	@FXML
	private RadioButton oneByOneRunModeRadioButton;
	@FXML
	private AnchorPane trimmedIntegratedDOSGraphAnchorPane;
	@FXML
	private VBox currentReproducedOperationContainerVBox;
	@FXML
	Button rollbackAllButton;
	@FXML
	private VBox reproducedAndInsertedOperationContainerVBox;

//	// Event Listener on Button[#resumeRunButton].onAction
//	@FXML
//	public void resumeRunButtonOnAction(ActionEvent event) {
//		// TODO Autogenerated
//		//NOT needed????????????????
//	}
//	
//	// Event Listener on Button[#finishButton].onAction
//	@FXML
//	public void finishButtonOnAction(ActionEvent event) {
//		// TODO Autogenerated
//		//NOT needed????????????????
//	}
	
	// Event Listener on Button[#rollbackAllButton].onAction
	@FXML
	public void rollbackAllButtonOnAction(ActionEvent event) throws SQLException, IOException {
		if(this.getManager().getReproducedAndInsertedOperationIDManagerPairList().isEmpty()) {
			AlertUtils.popAlert("Warning", "No inserted Operation to roll back!");
			return;
		}
		
		
		while(!this.getManager().getReproducedAndInsertedOperationIDManagerPairList().isEmpty()) {
			this.getManager().rollbackMostRecentlyInsertedOperation();
		}
	}
	
}
