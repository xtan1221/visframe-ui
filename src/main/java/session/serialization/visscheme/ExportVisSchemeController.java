package session.serialization.visscheme;

import javafx.fxml.FXML;
import javafx.scene.Parent;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.DirectoryChooser;
import javafx.stage.Stage;
import session.serialization.SerializationUtils;
import utils.AlertUtils;
import utils.exceptionhandler.ExceptionHandlerUtils;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import context.scheme.VisScheme;
import javafx.event.ActionEvent;

public class ExportVisSchemeController {
	
	public static final String FXML_FILE_DIR_STRING="/session/serialization/visscheme/ExportVisScheme.fxml";
	
	private ExportVisSchemeManager manager;
	
	void setManager(ExportVisSchemeManager manager) {
		this.manager = manager;
	}
	
	ExportVisSchemeManager getManager() {
		return this.manager;
	}
	

	Parent getRootNode() {
		return this.rootContainerVBox;
	}
	
	
	Path getExportDirectoryPath() {
		Path p = Paths.get(this.exportLocationTextField.getText());
		if(Files.notExists(p)) {
			return null;
		}
		
		if(!Files.isDirectory(p)) {
			return null;
		}
		return p;
	}
	
	TextField getSelectedVisSchemeUIDTextField() {
		return this.selectedVisSchemeUIDTextField;
	}

	Stage getStage() throws IOException {
		return (Stage) this.selectedVisSchemeUIDTextField.getScene().getWindow();
	}
	
	////////////////////////////////////////////////////
	private DirectoryChooser directoryChooser = new DirectoryChooser();
	
	@FXML
	public void initialize() {
		//
		this.selectedVisSchemeUIDTextField.textProperty().addListener((o,ov,nv)->{
			if(this.selectedVisSchemeUIDTextField.getText().isEmpty()) {
				this.selectedVisSchemeNameTextField.setText("");
			}else {
				this.selectedVisSchemeNameTextField.setText(this.getManager().getVisSchemeTableViewManager().getSelectedItem().getName().getStringValue());
			}
			
		});
	}
	
	@FXML
	private VBox rootContainerVBox;
	@FXML
	private TextField selectedVisSchemeNameTextField;
	@FXML
	private TextField selectedVisSchemeUIDTextField;
	@FXML
	private Button browseFileformatButton;
	@FXML
	private Button viewSelectedFileFormatDetailButton;
	@FXML
	private TextField exportLocationTextField;
	@FXML
	private Button browseExportLocationButton;
	@FXML
	private Button exportButton;
	@FXML
	private Button cancelButton;
	@FXML
	private Button resetButton;
	
	// Event Listener on Button[#browseVisSchemeButton].onAction
	@FXML
	public void browseVisSchemeButtonOnAction(ActionEvent event) throws IOException {
		try {
			this.getManager().getVisSchemeTableViewManager().showWindow(this.getStage());
		}catch(Exception e) {
			ExceptionHandlerUtils.show("ExportFileFormatController.browseFileformatButtonOnAction", e, this.getStage());
		}
	}
	// Event Listener on Button[#viewSelectedVisSchemeDetailButton].onAction
	@FXML
	public void viewSelectedVisSchemeDetailButtonOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#browseExportLocationButton].onAction
	@FXML
	public void browseExportLocationButtonOnAction(ActionEvent event) throws IOException {
		try {
			File selectedDirectory = directoryChooser.showDialog(this.getStage());
			if(selectedDirectory==null) {
				return;
			}
			this.exportLocationTextField.setText(selectedDirectory.toString());
		}catch(Exception e) {
			ExceptionHandlerUtils.show("ExportFileFormatController.browseExportLocationButtonOnAction", e, this.getStage());
		}
	}
	
	// Event Listener on Button[#exportButton].onAction
	@FXML
	public void exportButtonOnAction(ActionEvent event) throws IOException {
		try {
			if(this.getManager().getVisSchemeTableViewManager().getSelectedItem()==null) {
				AlertUtils.popAlert("Error", "No VisScheme is selected!");
				return;
			}else if(this.getExportDirectoryPath()==null) {
				AlertUtils.popAlert("Error", "No export directory is selected!");
				return;
				
			}else {
				VisScheme visScheme = this.getManager().getVisSchemeTableViewManager().getSelectedItem();
				Path exportFilePath = Paths.get(this.getExportDirectoryPath().toString(),visScheme.getName().getStringValue().concat(ExportVisSchemeManager.VISSCHEME_SERIALIZED_FILE_EXTENSTION));
				SerializationUtils.serializeToFile(exportFilePath, visScheme);
				
				this.getStage().close();
			}
		}catch(Exception e) {
			ExceptionHandlerUtils.show("ExportFileFormatController.exportButtonOnAction", e, this.getStage());
		}
	}
	
	// Event Listener on Button[#cancelButton].onAction
	@FXML
	public void cancelButtonOnAction(ActionEvent event) throws IOException {
		try {
			this.resetButtonOnAction(event);
			this.getStage().close();
		}catch(Exception e) {
			ExceptionHandlerUtils.show("ExportFileFormatController.cancelButtonOnAction", e, this.getStage());
		}
	}
	
	// Event Listener on Button[#resetButton].onAction
	@FXML
	public void resetButtonOnAction(ActionEvent event) throws IOException {
		try {
			this.getManager().getVisSchemeTableViewManager().getController().clearButtonOnAction(event);
			this.exportLocationTextField.setText("");
		}catch(Exception e) {
			ExceptionHandlerUtils.show("ExportFileFormatController.resetButtonOnAction", e, this.getStage());
		}
	}
}
